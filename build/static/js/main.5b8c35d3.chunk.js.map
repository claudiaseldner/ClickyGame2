{"version":3,"sources":["images/ave.png","images/ballena.png","images/cebra.png","images/chango.png","images/elefante.png","images/flamingo.png","images/foca.png","images/pinguino.png","images/iguana.png","images/leopardo.png","images/mantarralla.png","images/oso.png","components/Card/Card.js","components/ClickyBoard/Clickyboard.js","images.js","components/Jumbotron/Jumbotron.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Images","props","react_default","a","createElement","className","onClick","e","clickEvent","target","src","name","alt","Clickyboard","shake","characters","map","i","Card_Card","key","images","ave","ballena","cebra","chango","elefante","flamingo","foca","pinguino","iguana","leopardo","mantarralla","oso","Jumbotron","Navbar","Message2","Message","score","highScore","App","state","animals","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","_this2","this","prevState","shuffled","includes","setState","setTimeout","components_Navbar_Navbar","components_Jumbotron_Jumbotron","components_ClickyBoard_Clickyboard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b8c35d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ave.2d3a80cc.png\";","module.exports = __webpack_public_path__ + \"static/media/ballena.9b6132f7.png\";","module.exports = __webpack_public_path__ + \"static/media/cebra.1a286f2c.png\";","module.exports = __webpack_public_path__ + \"static/media/chango.24461554.png\";","module.exports = __webpack_public_path__ + \"static/media/elefante.dc87f82b.png\";","module.exports = __webpack_public_path__ + \"static/media/flamingo.4a1ac61d.png\";","module.exports = __webpack_public_path__ + \"static/media/foca.b23008cb.png\";","module.exports = __webpack_public_path__ + \"static/media/pinguino.6a171b3c.png\";","module.exports = __webpack_public_path__ + \"static/media/iguana.2af17d72.png\";","module.exports = __webpack_public_path__ + \"static/media/leopardo.12fb0fc7.png\";","module.exports = __webpack_public_path__ + \"static/media/mantarralla.284d58db.png\";","module.exports = __webpack_public_path__ + \"static/media/oso.9a88f373.png\";","import React from 'react';\nimport './Card.css';\n\n// the onClick function is defined as a callback so that the clicked elements value\n// can be passed to props.clickEvent to check if the image has been clicked or not\nconst Images = props => (\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n  </div>\n);\n\nexport default Images;","import React from 'react';\nimport './Clickyboard.css';\nimport Images from '../Card';\n\nconst Clickyboard = props => (\n \n  <div\n    className={\n      props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n  >\n    {props.characters.map((a, i) => <Images name={a} key={i} clickEvent={props.clickEvent} />)}\n  </div>\n);\n\nexport default Clickyboard;","import ave from './images/ave.png';\nimport ballena from './images/ballena.png';\nimport cebra from './images/cebra.png';\nimport chango from './images/chango.png';\nimport elefante from './images/elefante.png';\nimport flamingo from './images/flamingo.png';\nimport foca from './images/foca.png';\nimport pinguino from './images/pinguino.png';\nimport iguana from './images/iguana.png';\nimport leopardo from './images/leopardo.png';\nimport mantarralla from './images/mantarralla.png';\nimport oso from './images/oso.png';\n\nconst images = [\n  ave,\n  ballena,\n  cebra,\n  chango,\n  elefante,\n  flamingo,\n  foca,\n  pinguino,\n  iguana,\n  leopardo,\n  mantarralla,\n  oso,\n];\n\nexport default images;","import React from 'react';\nimport './Jumbotron.css';\n\nconst Jumbotron = () => (\n  <div className=\"jumbotron text-center d-flex align-items-center justify-content-center\">\n    <p className=\"m-0\">Click on an image to earn points, but don't click on any more than once!</p>\n  </div>\n);\nexport default Jumbotron;","import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = props => (\n  <div className=\"navbar\">\n    <div>Clicky Game</div>\n    <div className={props.Message2}>{props.Message}</div>\n    <div>\n      Score: {props.score} <span className=\"score\">|</span> Top Score: {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport ClickyBoard from \"./components/ClickyBoard\";\nimport images from \"./images\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Navbar from \"./components/Navbar\";\n\nclass App extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    Message2: '',\n    Message: 'Click an image to begin!',\n    animals: this.shuffleArray(),\n    wasClicked: [],\n    shake: false\n  };\n\n  clickEvent = this.checkClicked.bind(this);\n\n  shuffleArray() {\n    const newArr = images.slice();\n    const shuffleArr = [];\n\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    const prevState = this.state.wasClicked.slice();\n\n    const shuffled = this.shuffleArray();\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n      } else {\n        score++;\n      }\n\n      prevState.push(clickedElem);\n    }\n\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        animals: shuffled,\n        score: score,\n        highScore: highScore,\n        Message2: 'incorrect',\n        Message: 'Incorrect guess!',\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    this.setState({\n      score: score,\n      highScore: highScore,\n      animals: shuffled,\n      Message2: 'correct',\n      Message: 'You Guessed Correctly!',\n      wasClicked: prevState,\n      shake: false\n    });\n\n    return setTimeout(() => this.setState({ Message2: '' }), 500);\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          Message={state.Message}\n          Message2={state.Message2}\n        />\n        <Jumbotron />\n        <ClickyBoard\n          shake={state.shake}\n          characters={state.animals}\n          clickEvent={this.clickEvent}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}